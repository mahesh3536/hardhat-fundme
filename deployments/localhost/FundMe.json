{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperwithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1f32c2a2a7c94867b39f44b9140f1d98262104c682782be223bcd9412c40c088",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1047912",
    "logsBloom": "0x
    "blockHash": "0x8232aabc51ca1f9789c1c1f9f48b3cb0f3b47b948a702e98ccf7214b1e46dbd2",
    "transactionHash": "0x1f32c2a2a7c94867b39f44b9140f1d98262104c682782be223bcd9412c40c088",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1047912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fa63400d9a4a34942eac10a95d0c537",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperwithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private addressToAmountFunded;\\n    address[] private funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // ETH/USD price feed address of Sepolia Network.\\n        return priceFeed.version();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function cheaperwithdraw() public onlyOwner {\\n        address[] memory newFunders = funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < newFunders.length;\\n            funderIndex++\\n        ) {\\n            address funder = newFunders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return funders[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdc605f6f733a61acdbc9cfce551732ca790ea3ec17aef4e58e622fa2fddb4bde\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd9ffd2e6e536715f43070b819df5c7333e54653672e6a28afef5ecfe1be6cf1f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200130d3803806200130d83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611194620001796000396000818161041d0152818161065d015261098001526111946000f3fe60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a592146101395780639e87a5cd14610164578063b60d42881461018f578063d7b4750c14610199578063dba6335f146101d657610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b57806367bf350b1461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b79565b61033b565b6040516100d79190610bbf565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bbf565b60405180910390f35b34801561011757600080fd5b5061012061041b565b005b34801561012e57600080fd5b5061013761065b565b005b34801561014557600080fd5b5061014e6108ff565b60405161015b9190610bbf565b60405180910390f35b34801561017057600080fd5b5061017961090c565b6040516101869190610c39565b60405180910390f35b610197610201565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190610c80565b610936565b6040516101cd9190610cbc565b60405180910390f35b3480156101e257600080fd5b506101eb61097e565b6040516101f89190610cbc565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a290919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d34565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d83565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610dcc565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054b576000600182815481106104c6576104c5610df9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390610e28565b9150506104a3565b50600067ffffffffffffffff81111561056757610566610e70565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600190805190602001906105ab929190610a6f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610ed0565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905080610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610f31565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561076457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071a575b5050505050905060005b81518110156107ee57600082828151811061078c5761078b610df9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e690610e28565b91505061076e565b50600067ffffffffffffffff81111561080a57610809610e70565b5b6040519080825280602002602001820160405280156108385781602001602082028036833780820191505090505b506001908051906020019061084e929190610a6f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161087590610ed0565b60006040518083038185875af1925050503d80600081146108b2576040519150601f19603f3d011682016040523d82523d6000602084013e6108b7565b606091505b50509050806108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f290610f31565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061094c5761094b610df9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806109ae836109de565b90506000670de0b6b3a764000085836109c79190610f51565b6109d19190610fc2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a50919061106b565b5050509150506402540be40081610a6791906110e6565b915050919050565b828054828255906000526020600020908101928215610ae8579160200282015b82811115610ae75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a8f565b5b509050610af59190610af9565b5090565b5b80821115610b12576000816000905550600101610afa565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4682610b1b565b9050919050565b610b5681610b3b565b8114610b6157600080fd5b50565b600081359050610b7381610b4d565b92915050565b600060208284031215610b8f57610b8e610b16565b5b6000610b9d84828501610b64565b91505092915050565b6000819050919050565b610bb981610ba6565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610b1b565b610bda565b610b1b565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610ba6565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610b16565b5b6000610ca484828501610c6b565b91505092915050565b610cb681610b3b565b82525050565b6000602082019050610cd16000830184610cad565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d1e601b83610cd7565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8e82610ba6565b9150610d9983610ba6565b9250828201905080821115610db157610db0610d54565b5b92915050565b600081519050610dc681610c54565b92915050565b600060208284031215610de257610de1610b16565b5b6000610df084828501610db7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e3382610ba6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e6557610e64610d54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610eba600083610e9f565b9150610ec582610eaa565b600082019050919050565b6000610edb82610ead565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f1b600b83610cd7565b9150610f2682610ee5565b602082019050919050565b60006020820190508181036000830152610f4a81610f0e565b9050919050565b6000610f5c82610ba6565b9150610f6783610ba6565b9250828202610f7581610ba6565b91508282048414831517610f8c57610f8b610d54565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fcd82610ba6565b9150610fd883610ba6565b925082610fe857610fe7610f93565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101281610ff3565b811461101d57600080fd5b50565b60008151905061102f81611009565b92915050565b6000819050919050565b61104881611035565b811461105357600080fd5b50565b6000815190506110658161103f565b92915050565b600080600080600060a0868803121561108757611086610b16565b5b600061109588828901611020565b95505060206110a688828901611056565b94505060406110b788828901610db7565b93505060606110c888828901610db7565b92505060806110d988828901611020565b9150509295509295909350565b60006110f182611035565b91506110fc83611035565b925082820261110a81611035565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561114257611141610d54565b5b828205841483151761115757611156610d54565b5b509291505056fea264697066735822122088da35493887f2f112ed6b16918f80d25a5399a27deee2a686a2bbd408e3602d64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a592146101395780639e87a5cd14610164578063b60d42881461018f578063d7b4750c14610199578063dba6335f146101d657610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b57806367bf350b1461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b79565b61033b565b6040516100d79190610bbf565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bbf565b60405180910390f35b34801561011757600080fd5b5061012061041b565b005b34801561012e57600080fd5b5061013761065b565b005b34801561014557600080fd5b5061014e6108ff565b60405161015b9190610bbf565b60405180910390f35b34801561017057600080fd5b5061017961090c565b6040516101869190610c39565b60405180910390f35b610197610201565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190610c80565b610936565b6040516101cd9190610cbc565b60405180910390f35b3480156101e257600080fd5b506101eb61097e565b6040516101f89190610cbc565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a290919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d34565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d83565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610dcc565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054b576000600182815481106104c6576104c5610df9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390610e28565b9150506104a3565b50600067ffffffffffffffff81111561056757610566610e70565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600190805190602001906105ab929190610a6f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610ed0565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905080610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610f31565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561076457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071a575b5050505050905060005b81518110156107ee57600082828151811061078c5761078b610df9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e690610e28565b91505061076e565b50600067ffffffffffffffff81111561080a57610809610e70565b5b6040519080825280602002602001820160405280156108385781602001602082028036833780820191505090505b506001908051906020019061084e929190610a6f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161087590610ed0565b60006040518083038185875af1925050503d80600081146108b2576040519150601f19603f3d011682016040523d82523d6000602084013e6108b7565b606091505b50509050806108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f290610f31565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001828154811061094c5761094b610df9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806109ae836109de565b90506000670de0b6b3a764000085836109c79190610f51565b6109d19190610fc2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a50919061106b565b5050509150506402540be40081610a6791906110e6565b915050919050565b828054828255906000526020600020908101928215610ae8579160200282015b82811115610ae75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a8f565b5b509050610af59190610af9565b5090565b5b80821115610b12576000816000905550600101610afa565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4682610b1b565b9050919050565b610b5681610b3b565b8114610b6157600080fd5b50565b600081359050610b7381610b4d565b92915050565b600060208284031215610b8f57610b8e610b16565b5b6000610b9d84828501610b64565b91505092915050565b6000819050919050565b610bb981610ba6565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610b1b565b610bda565b610b1b565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610ba6565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610b16565b5b6000610ca484828501610c6b565b91505092915050565b610cb681610b3b565b82525050565b6000602082019050610cd16000830184610cad565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d1e601b83610cd7565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8e82610ba6565b9150610d9983610ba6565b9250828201905080821115610db157610db0610d54565b5b92915050565b600081519050610dc681610c54565b92915050565b600060208284031215610de257610de1610b16565b5b6000610df084828501610db7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e3382610ba6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e6557610e64610d54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610eba600083610e9f565b9150610ec582610eaa565b600082019050919050565b6000610edb82610ead565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f1b600b83610cd7565b9150610f2682610ee5565b602082019050919050565b60006020820190508181036000830152610f4a81610f0e565b9050919050565b6000610f5c82610ba6565b9150610f6783610ba6565b9250828202610f7581610ba6565b91508282048414831517610f8c57610f8b610d54565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fcd82610ba6565b9150610fd883610ba6565b925082610fe857610fe7610f93565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61101281610ff3565b811461101d57600080fd5b50565b60008151905061102f81611009565b92915050565b6000819050919050565b61104881611035565b811461105357600080fd5b50565b6000815190506110658161103f565b92915050565b600080600080600060a0868803121561108757611086610b16565b5b600061109588828901611020565b95505060206110a688828901611056565b94505060406110b788828901610db7565b93505060606110c888828901610db7565b92505060806110d988828901611020565b9150509295509295909350565b60006110f182611035565b91506110fc83611035565b925082820261110a81611035565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561114257611141610d54565b5b828205841483151761115757611156610d54565b5b509291505056fea264697066735822122088da35493887f2f112ed6b16918f80d25a5399a27deee2a686a2bbd408e3602d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}